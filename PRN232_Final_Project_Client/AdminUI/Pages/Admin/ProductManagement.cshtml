@page
@model AdminUI.Pages.Admin.ProductManagementModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Product Management";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-box"></i> Product Management
                    </h3>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#productModal" onclick="clearForm()">
                        <i class="fas fa-plus"></i> Add Product
                    </button>
                </div>
                <div class="card-body">
                    <!-- Search and Filter -->
                    <form id="search" method="get">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" id="searchInput" placeholder="Search products...">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="categoryFilter">
                                <!-- Categories will be populated here -->
                            </select>
                        </div>
                        <div class="col-md-2">
                            <select class="form-select" id="statusFilter">
                                <option value="">All Status</option>
                                <option value="true">In Stock</option>
                                <option value="false">Out of Stock</option>
                            </select>
                        </div>
                    </div>
                    </form>

                    <!-- Products Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Image</th>
                                    <th>Product Name</th>
                                    <th>Category</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
                            <tbody id="productTableBody">
                                <!--List Product-->
                            </tbody>
                        </table>
                    </div>
                    <nav>
                        <ul class="pagination justify-content-center"></ul>
                    </nav>




                </div>
            </div>
        </div>
    </div>
</div>

<!-- Product Modal -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="productForm" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalLabel">Add New Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="productId" name="ProductID">

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="productName" name="ProductName" required maxlength="100">
                                <div class="invalid-feedback">Please enter product name (max 100 characters)</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="categoryId" class="form-label">Category <span class="text-danger">*</span></label>
                                <select class="form-select" id="categoryId" name="CategoryID" required>

                                    <!-- Categories will be populated here -->
                                </select>
                                <div class="invalid-feedback">Please select a category</div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" name="Description" rows="3" maxlength="255"></textarea>
                        <div class="form-text">Maximum 255 characters</div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="price" class="form-label">Price <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="price" name="Price" step="0.01" min="0.01" required>
                                </div>
                                <div class="invalid-feedback">Please enter a valid price (> 0)</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="stockQuantity" class="form-label">Stock Quantity <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="stockQuantity" name="StockQuantity" min="0" required>
                                <div class="invalid-feedback">Please enter a valid quantity (>= 0)</div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="imageFile" class="form-label">Upload Image</label>
                        <input type="file" class="form-control" id="imageFile" name="ImageFile" accept="image/*">
                        <div class="form-text">Choose product image from your device</div>
                    </div>


                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="isAvailable" name="IsAvailable" checked>
                            <label class="form-check-label" for="isAvailable">
                                Product Available
                            </label>
                        </div>
                    </div>

                    <!-- Image Preview -->
                    <div id="imagePreview" class="mb-3" style="display: none;">
                        <label class="form-label">Image Preview:</label>
                        <div>
                            <img id="previewImg" src="" alt="Preview" class="img-thumbnail" style="max-width: 200px; max-height: 200px;">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Product
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Product Modal -->
<div class="modal fade" id="viewProductModal" tabindex="-1" aria-labelledby="viewProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewProductModalLabel">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="viewProductContent">
                <!-- Content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }

    .table th {
        border-top: none;
        font-weight: 600;
    }

    .btn-group .btn {
        margin-right: 2px;
    }

        .btn-group .btn:last-child {
            margin-right: 0;
        }

    .img-thumbnail {
        border-radius: 0.375rem;
    }

    .badge {
        font-size: 0.75em;
    }

    .modal-lg {
        max-width: 800px;
    }

    .invalid-feedback {
        display: block;
    }

    .form-control:invalid {
        border-color: #dc3545;
    }

    .form-control:valid {
        border-color: #198754;
    }
</style>

<script>

    $(document).ready(function () {
                                    const page = parseInt($(this).data('page'));
                                    if (isNaN(page) || page < 1) {
                                        loadProducts(1);
                                    } else {
                                        loadProducts(page);
                                    }
                                });


                               
                                 
        // Gắn sự kiện cho cả 3 thành phần: input + 2 dropdown
        $('#searchInput, #categoryFilter, #statusFilter').on('input change', function () {
            $.ajax({
                url: '?handler=SearchProducts',
                type: 'GET',
                data: {
                    searchTerm: $('#searchInput').val(),
                    categoryId: $('#categoryFilter').val(),
                    status: $('#statusFilter').val()
                },
                success: function (data) {
                    const container = $('#productTableBody');
                    renderProducts(data.products, container);
                    renderPagination(data.totalPages, 1);
                },
                error: function () {
                    console.error('Failed to load products.');
                }
            });
        });
    


                                    function loadProducts(page) {

                                    $.ajax({
                                        url: `?handler=AllProduct&page=${page}`,
                                        type: 'GET',
                                        success: function (data) {
                                            const container = $('#productTableBody');
                                            renderProducts(data.products, container);
                                            renderPagination(data.totalPages, page);
                                        },
                                        error: function () {
                                            console.error('Failed to load products.');
                                        }
                                    });
                                }

                                function renderProducts(data, container) {
                                    container.empty();

                                    if (!data || data.length === 0) {
                                    container.append(`
                                    <tr>
                                        <div class="col-12 text-center">
                                            <div style="padding: 4rem 2rem; background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); border-radius: 24px; box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);">
                                                <i class="fas fa-search" style="font-size: 4rem; color: #cbd5e0; margin-bottom: 2rem;"></i>
                                                <h3 style="color: #4a5568; font-family: 'Playfair Display', serif; margin-bottom: 1rem;">No products found</h3>
                                                <p style="color: #718096;">Try adjusting your search or browse different categories</p>
                                            </div>
                                        </div>
                                    </tr>`);

                                    return;
                                    }

                                    $.ajax({
                                        url: '/Category?handler=AllCategory',
                                        type: 'GET',
                                        success: function(categories) {
                                            const categoryMap = categories.reduce((map, category) => {
                                                map[category.categoryID] = category.categoryName;
                                                return map;
                                            }, {});
                                            renderProductRows(data, container, categoryMap);
                                        },
                                        error: function() {
                                            console.error('Failed to load categories.');
                                        }
                                    });

                                        function renderProductRows(data, container, categoryMap) {
        container.empty(); // Xóa dữ liệu cũ (nếu có)

        data.forEach(product => {
            // Nếu categoryName chưa có, lấy từ categoryMap
            if (!product.categoryName && categoryMap[product.categoryID]) {
                product.categoryName = categoryMap[product.categoryID];
            }

            const imageHtml = product.imageURL
                ? `<img src="/${product.imageURL}" class="img-thumbnail" style="width:50px;height:50px;">`
                : `<div class="bg-light text-center" style="width:50px;height:50px;"><i class="fas fa-image text-muted"></i></div>`;

            const html = `
                <tr>
                    <td>${product.productID}</td>
                    <td>${imageHtml}</td>
                    <td><strong>${product.productName}</strong></td>
                    <td>${product.categoryName || 'N/A'}</td>
                    <td class="text-success fw-bold">${product.price}</td>
                    <td><span class="badge ${product.stockQuantity > 0 ? "bg-success" : "bg-danger"}">${product.stockQuantity}</span></td>
                    <td><span class="badge ${product.isAvailable ? "bg-success" : "bg-secondary"}">${product.isAvailable ? "In Stock" : "Out of Stock"}</span></td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="viewProduct(${product.productID})">Details</button>
                            <button class="btn btn-outline-warning" onclick="editProduct(${product.productID})">Edit</button>
                            <button class="btn btn-outline-danger" onclick="deleteProduct(${product.productID}, '${product.productName}')">Delete</button>
                        </div>
                    </td>
                </tr>
            `;
            container.append(html);
        });
    }

                                }

                                ///renderPagination
                                function renderPagination(totalPages, currentPage) {
                                    const pagination = $('.pagination');
                                    pagination.empty();

                                    // Previous
                                    pagination.append(`
                                        <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                            <a class="page-link" href="#" data-page="${currentPage - 1}">&laquo;</a>
                                        </li>`);

                                    // Page numbers
                                    for (let i = 1; i <= totalPages; i++) {
                                        pagination.append(`
                                            <li class="page-item ${i === currentPage ? 'active' : ''}">
                                                <a class="page-link" id="pageNumber" href="#" data-page="${i}">${i}</a>
                                            </li>`);
                                    }

                                    // Next
                                    pagination.append(`
                                        <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                                            <a class="page-link" href="#" data-page="${currentPage + 1}">&raquo;</a>
                                        </li>`);

                                    // Event binding
                                    $('.page-link').click(function (e) {
                                        e.preventDefault();
                                        const page = parseInt($(this).data('page'));
                                        if (!isNaN(page)) {
                                            sessionStorage.setItem('currentPage', page);
                                            loadProducts(page);
                                        }
                                    });
                                }

                                // Optional: Dummy handlers
                                function viewProduct(id) {
                                    alert(`View product ${id}`);
                                }

                                function deleteProduct(id, name) {
                                    if (confirm(`Delete product "${name}"?`)) {
                                        // Handle delete logic here
                                    }
                                }

    $(document).ready(function() {
        $.ajax({
            url: '/Category?handler=AllCategory',
            type: 'GET',
            success: function(data) {
                const categorySelect = $('#categoryId, #categoryFilter');
                categorySelect.empty();
                categorySelect.append('<option value="">Select Category</option>');
                data.forEach(category => {
                categorySelect.append(`<option value="${category.categoryID}">${category.categoryName}</option>`);
                });
            },
            error: function() {
                console.error('Failed to load categories.');
            }
        });
    });


    

    // Clear form
    function clearForm() {
        document.getElementById('productForm').reset();
        document.getElementById('productId').value = '0';
        document.getElementById('productModalLabel').textContent = 'Add New Product';
        document.getElementById('imagePreview').style.display = 'none';


    }

        function editProduct(productID) {
        // Reset form & trạng thái
        const form = document.getElementById('productForm');
        form.reset();
        form.classList.remove('was-validated');
        $(form).find('.is-invalid').removeClass('is-invalid');

        $('#productModalLabel').text('Edit Product');
        $('#imagePreview').hide();
        $('#previewImg').attr('src', '');

        // Gọi API lấy chi tiết sản phẩm
        $.ajax({
            url: `?handler=ProductDetail&productId=${productID}`,
            type: 'GET',
            success: function(data) {
                if (!data) {
                    alert('No product data found.');
                    return;
                }

                $('#productId').val(data.productID);
                $('#productName').val(data.productName);
                $('#categoryId').val(data.categoryID);
                $('#description').val(data.description);
                $('#price').val(data.price);
                $('#stockQuantity').val(data.stockQuantity);
                $('#isAvailable').prop('checked', data.isAvailable);

                if (data.imageURL) {
                    $('#previewImg').attr('src', '/' + data.imageURL);
                    $('#imagePreview').show();
                }

                // Mở modal sau khi load dữ liệu xong
                const modal = new bootstrap.Modal(document.getElementById('productModal'));
                modal.show();
            },
            error: function() {
                alert('Failed to load product details.');
            }
        });
    }


    $('#productForm').on('submit', function (e) {
      e.preventDefault();

      var form = this;
      var formData = new FormData(form); // Tự động lấy cả input type="file" và các field khác
      console.log(document.getElementById("productId").value);
      const page = sessionStorage.getItem('currentPage') || 1; // Lấy trang hiện tại từ sessionStorage
      if(document.getElementById("productId").value != 0){
          //Edit Product
          $.ajax({
        url: '?handler=Update',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function () {
          alert('Product Edit successfully!');
          $('#productModal').modal('hide');
          
          console.log(page);
          loadProducts(page)
        },
        error: function () {
          alert('Error editing product.');
        }
      });
      }else{
          // add product
          $.ajax({
        url: '?handler=Create',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function () {
          alert('Product created successfully!');
          $('#productModal').modal('hide');
         
          console.log(page);
          loadProducts(page)
        },
        error: function () {
          alert('Error creating product.');
        }
      });
      }
    });



    // View product
        function viewProduct(productID) {
        $.ajax({
            url: `?handler=ProductDetail&productId=${productID}`,
            type: 'GET',
            success: function(data) {
                const content = `
                    <div class="row">
                        <div class="col-md-4">
                            <img src="/${data.imageURL || 'default.jpg'}" alt="${data.productName}" class="img-fluid rounded" onerror="this.src='default.jpg'">
                        </div>
                        <div class="col-md-8">
                            <h4>${data.productName}</h4>
                            <p class="text-muted">${data.description}</p>
                            <hr>
                            <div class="row">
                                <div class="col-sm-6">
                                    <strong>Category:</strong> ${data.categoryID}
                                </div>
                                <div class="col-sm-6">
                                    <strong>Price:</strong> <span class="text-success">${data.price}</span>
                                </div>
                                <div class="col-sm-6">
                                    <strong>Quantity:</strong> ${data.stockQuantity}
                                </div>
                                <div class="col-sm-6">
                                    <CreatedDate:</strong> ${data.createdDate}
                                </div>
                                <div class="col-sm-6">
                                    <strong>Status:</strong>
                                    <span class="badge ${data.isAvailable ? 'bg-success' : 'bg-secondary'}">
                                        ${data.isAvailable ? 'In Stock' : 'Out of Stock'}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                document.getElementById('viewProductContent').innerHTML = content;
                const modal = new bootstrap.Modal(document.getElementById('viewProductModal'));
                modal.show();
            },
            error: function() {
                alert('Failed to load product details.');
            }
        });
    }



    // Delete product

        function deleteProduct(productId, productName) {
        if (confirm(`Are you sure you want to delete the product "${productName}"?`)) {
            $.ajax({
                url: `?handler=Delete&productId=${productId}`,
                type: 'GET',
                success: function(data) {
                    alert('Product has been deleted!');
                    const page = sessionStorage.getItem('currentPage') || 1; // Get current page from sessionStorage
                    loadProducts(page); // Reload products
                },
                error: function() {
                    alert('Delete failed!');
                }
            });
        }
    }


</script>