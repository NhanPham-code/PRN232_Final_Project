@page
@model AdminUI.Pages.Admin.UserFeedbackModel
@{
    ViewData["Title"] = "Quản lý phản hồi người dùng";
}

<div class="container mt-4">
    <h2 class="mb-4">💬 Quản lý phản hồi người dùng</h2>

    <form method="post" id="antiForgeryForm">
        @Html.AntiForgeryToken()
    </form>

    <table class="table table-bordered table-hover align-middle">
        <thead class="table-light">
            <tr>
                <th>ID</th>
                <th>Người gửi</th>
                <th>Email</th>
                <th>Nội dung</th>
                <th>Ngày gửi</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.FeedbackList.Any())
            {
                foreach (var fb in Model.FeedbackList)
                {
                    <tr>
                        <td>@fb.UserID</td>
                        <td>@fb.FullName</td>
                        <td>@fb.Email</td>
                        <td>@fb.Description</td>
                        <td>@fb.SubmittedDate.ToString("dd/MM/yyyy HH:mm")</td>
                        <td>
                            <button class="btn btn-danger delete-feedback-btn"
                                    data-user-id="@fb.UserID">
                                Xoá
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="text-center">Không có phản hồi nào.</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-center mt-3">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?pageIndex=@(Model.CurrentPage - 1)">Trang trước</a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                        <a class="page-link" href="?pageIndex=@i">@i</a>
                    </li>
                }
                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" href="?pageIndex=@(Model.CurrentPage + 1)">Trang sau</a>
                </li>
            </ul>
        </nav>
    </div>


</div>
@section Scripts {
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const deleteButtons = document.querySelectorAll(".delete-feedback-btn");
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            deleteButtons.forEach(btn => {
                btn.addEventListener("click", async () => {
                    const userId = btn.getAttribute("data-user-id");

                    const confirmed = await Swal.fire({
                        title: 'Bạn chắc chắn muốn xoá phản hồi?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Xoá',
                        cancelButtonText: 'Huỷ'
                    });

                    if (confirmed.isConfirmed) {
                        try {
                            const response = await fetch('/Admin/UserFeedback?handler=Delete', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': token
                                },
                                body: JSON.stringify({ userId: parseInt(userId) })
                            });

                            if (!response.ok) {
                                throw new Error("HTTP status " + response.status);
                            }

                            const result = await response.json();

                            if (result.success) {
                                await Swal.fire('✅ Đã xoá phản hồi!', '', 'success');
                                location.reload();
                            } else {
                                Swal.fire('❌ Xoá thất bại!', result.message || '', 'error');
                            }
                        } catch (error) {
                            console.error("Lỗi khi xoá feedback:", error);
                            Swal.fire('❌ Lỗi kết nối với server!', error.message || '', 'error');
                        }
                    }
                });
            });
        });

    </script>
}
