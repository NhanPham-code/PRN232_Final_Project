@page
@model PRN232_Final_Project_Client.Pages.Categories.CategoryModel
@{
    ViewData["Title"] = "Category Management";
}

<h2>Category List</h2>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var err in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <div>@err.ErrorMessage</div>
        }
    </div>
}

<button class="btn btn-success mb-3" data-bs-toggle="modal" data-bs-target="#addModal">+ Add Category</button>

<div class="mb-3">
    <input id="searchInput" type="text" class="form-control" placeholder="Search by category name..." />
</div>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Description</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="categoryTableBody">
    </tbody>
</table>
<nav>
    <ul class="pagination justify-content-center mt-4" id="paginationContainer"></ul>
</nav>

<!-- Add Modal -->
<div class="modal fade" id="addModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="Create">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">Add New Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Category Name</label>
                        <input class="form-control" name="CategoryName" required />
                        <span class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description (Optional)</label>
                        <textarea class="form-control" name="Description"></textarea>
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success">Create Category</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-page-handler="Update">
                @Html.AntiForgeryToken()
                <input type="hidden" name="CategoryID" id="edit-id" />
                <div class="modal-header">
                    <h5 class="modal-title">Edit Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Category Name</label>
                        <input class="form-control" name="CategoryName" id="edit-name" required />
                        <span class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="Description" id="edit-desc"></textarea>
                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-warning">Update</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the category "<span id="delete-category-name"></span>"?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="post" style="display: inline;" asp-page-handler="Delete">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" id="delete-category-id" />
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        // Edit modal event handler
        const editModal = document.getElementById('editModal');
        editModal.addEventListener('show.bs.modal', event => {
            const button = event.relatedTarget;
            document.getElementById('edit-id').value = button.getAttribute('data-id');
            document.getElementById('edit-name').value = button.getAttribute('data-name');
            document.getElementById('edit-desc').value = button.getAttribute('data-desc');
        });

        // Delete modal event handler
        const deleteModal = document.getElementById('deleteModal');
        deleteModal.addEventListener('show.bs.modal', event => {
            const button = event.relatedTarget;
            const categoryId = button.getAttribute('data-id');
            const categoryName = button.getAttribute('data-name');

            document.getElementById('delete-category-id').value = categoryId;
            document.getElementById('delete-category-name').textContent = categoryName;
        });

        // Reset add modal when hidden
        const addModal = document.getElementById('addModal');
        addModal.addEventListener('hidden.bs.modal', () => {
            const form = addModal.querySelector('form');
            form.reset();
            form.querySelectorAll('.text-danger').forEach(span => span.textContent = '');
        });

        $(document).ready(function () {
            const pageSize = 5;
            let currentPage = 1;
            let currentSearchTerm = '';

            // Load categories with pagination and search
            function loadCategories(page, searchTerm) {
                $.ajax({
                    url: '?handler=Search',
                    type: 'GET',
                    data: {
                        searchTerm: searchTerm,
                        pagenumber: page
                    },
                    success: function (result) {
                        renderTable(result.categories);
                        renderPagination(result.totalCount, page);
                        currentPage = page;
                        currentSearchTerm = searchTerm;
                    },
                    error: function () {
                        $('#categoryTableBody').html('<tr><td colspan="4">Error loading data.</td></tr>');
                        $('#paginationContainer').empty();
                    }
                });
            }

            // Render table with improved delete button
            function renderTable(categories) {
                const tableBody = $('#categoryTableBody');
                tableBody.empty();
                if (!categories || categories.length === 0) {
                    tableBody.html('<tr><td colspan="4">No matching categories found.</td></tr>');
                    return;
                }
                categories.forEach(function (c) {
                    const row = `
                        <tr>
                            <td>${c.categoryID}</td>
                            <td>${c.categoryName}</td>
                            <td>${c.description || ''}</td>
                            <td>
                                <button class="btn btn-warning btn-sm me-2"
                                        data-bs-toggle="modal"
                                        data-bs-target="#editModal"
                                        data-id="${c.categoryID}"
                                        data-name="${c.categoryName}"
                                        data-desc="${c.description || ''}">
                                    Edit
                                </button>
                                <button class="btn btn-danger btn-sm"
                                        data-bs-toggle="modal"
                                        data-bs-target="#deleteModal"
                                        data-id="${c.categoryID}"
                                        data-name="${c.categoryName}">
                                    Delete
                                </button>
                            </td>
                        </tr>`;
                    tableBody.append(row);
                });
            }


                   // Render pagination
        function renderPagination(totalPages, currentPage) {
            const paginationContainer = $('#paginationContainer');
            paginationContainer.empty();

            if (totalPages === 0) return;

            const prevDisabled = currentPage === 1 ? 'disabled' : '';
            paginationContainer.append(`<li class="page-item ${prevDisabled}"><a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a></li>`);

            for (let i = 1; i <= totalPages; i++) {
                const activeClass = (i === currentPage) ? 'active' : '';
                paginationContainer.append(`<li class="page-item ${activeClass}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`);
            }

            const nextDisabled = currentPage === totalPages ? 'disabled' : '';
            paginationContainer.append(`<li class="page-item ${nextDisabled}"><a class="page-link" href="#" data-page="${currentPage + 1}">Next</a></li>`);
        }

            // Pagination click handler
            $('#paginationContainer').on('click', 'a.page-link', function (e) {
                e.preventDefault();
                const page = parseInt($(this).data('page'));
                if (page && page !== currentPage && page > 0) {
                    loadCategories(page, currentSearchTerm);
                }
            });

            // Search input handler
            $('#searchInput').on('keyup', function () {
                const searchTerm = $(this).val().trim();
                loadCategories(1, searchTerm);
            });

            // Handle form submissions with success/error feedback
            $('form').on('submit', function(e) {
                const form = $(this);
                const submitBtn = form.find('button[type="submit"]');
                submitBtn.prop('disabled', true).text('Processing...');

                setTimeout(() => {
                    submitBtn.prop('disabled', false);
                    // Reset button text based on action
                    if (submitBtn.hasClass('btn-success')) {
                        submitBtn.text('Create Category');
                    } else if (submitBtn.hasClass('btn-warning')) {
                        submitBtn.text('Update');
                    } else if (submitBtn.hasClass('btn-danger')) {
                        submitBtn.text('Delete');
                    }
                }, 2000);
            });

            // Initial load
            loadCategories(1, '');
        });
    </script>
}