using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace UserAPI.Migrations
{
    /// <inheritdoc />
    public partial class SeedUsersStatic : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 61, 245, 95, 239, 114, 51, 117, 227, 183, 88, 194, 170, 106, 144, 54, 13, 33, 71, 118, 189, 184, 225, 12, 65, 131, 253, 201, 255, 151, 229, 142, 245, 94, 254, 157, 12, 111, 7, 197, 205, 92, 121, 191, 176, 238, 210, 90, 21, 74, 229, 48, 186, 12, 115, 248, 70, 202, 75, 52, 134, 237, 133, 70, 90 }, new byte[] { 141, 64, 4, 134, 215, 100, 101, 229, 217, 66, 141, 203, 233, 199, 35, 51, 46, 248, 54, 179, 214, 28, 47, 122, 137, 17, 58, 11, 78, 111, 103, 96, 106, 85, 125, 215, 222, 76, 5, 9, 7, 231, 21, 163, 240, 155, 230, 86, 2, 94, 247, 158, 118, 220, 179, 233, 5, 31, 3, 218, 189, 53, 185, 7, 191, 200, 116, 172, 23, 52, 112, 188, 35, 213, 174, 98, 224, 96, 114, 244, 81, 83, 89, 30, 40, 248, 35, 0, 151, 183, 215, 16, 10, 38, 135, 11, 128, 232, 56, 203, 156, 119, 0, 96, 55, 12, 243, 165, 15, 213, 43, 158, 103, 115, 150, 193, 65, 32, 1, 122, 27, 182, 73, 33, 127, 132, 245, 240 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 2,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 61, 245, 95, 239, 114, 51, 117, 227, 183, 88, 194, 170, 106, 144, 54, 13, 33, 71, 118, 189, 184, 225, 12, 65, 131, 253, 201, 255, 151, 229, 142, 245, 94, 254, 157, 12, 111, 7, 197, 205, 92, 121, 191, 176, 238, 210, 90, 21, 74, 229, 48, 186, 12, 115, 248, 70, 202, 75, 52, 134, 237, 133, 70, 90 }, new byte[] { 141, 64, 4, 134, 215, 100, 101, 229, 217, 66, 141, 203, 233, 199, 35, 51, 46, 248, 54, 179, 214, 28, 47, 122, 137, 17, 58, 11, 78, 111, 103, 96, 106, 85, 125, 215, 222, 76, 5, 9, 7, 231, 21, 163, 240, 155, 230, 86, 2, 94, 247, 158, 118, 220, 179, 233, 5, 31, 3, 218, 189, 53, 185, 7, 191, 200, 116, 172, 23, 52, 112, 188, 35, 213, 174, 98, 224, 96, 114, 244, 81, 83, 89, 30, 40, 248, 35, 0, 151, 183, 215, 16, 10, 38, 135, 11, 128, 232, 56, 203, 156, 119, 0, 96, 55, 12, 243, 165, 15, 213, 43, 158, 103, 115, 150, 193, 65, 32, 1, 122, 27, 182, 73, 33, 127, 132, 245, 240 } });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 248, 178, 175, 248, 87, 241, 114, 26, 121, 97, 106, 107, 120, 85, 38, 58, 200, 70, 76, 70, 181, 231, 219, 183, 83, 218, 231, 237, 103, 38, 10, 47, 229, 166, 123, 35, 117, 222, 232, 202, 238, 26, 35, 143, 230, 112, 38, 156, 240, 222, 112, 91, 205, 146, 116, 21, 60, 227, 205, 15, 176, 5, 167, 55 }, new byte[] { 195, 231, 55, 174, 16, 87, 39, 145, 194, 204, 46, 98, 120, 70, 131, 31, 176, 178, 130, 55, 150, 117, 43, 11, 122, 46, 218, 178, 55, 55, 111, 94, 177, 247, 88, 43, 118, 38, 68, 78, 241, 180, 220, 120, 17, 169, 31, 126, 51, 21, 169, 174, 74, 235, 177, 2, 12, 14, 55, 251, 74, 161, 80, 36, 42, 53, 153, 108, 80, 193, 99, 49, 170, 99, 218, 205, 159, 118, 88, 175, 34, 227, 245, 118, 39, 2, 164, 204, 15, 9, 41, 249, 191, 88, 118, 79, 224, 193, 19, 186, 86, 216, 8, 17, 151, 41, 233, 110, 245, 234, 71, 74, 238, 101, 9, 115, 175, 135, 184, 63, 6, 101, 37, 139, 237, 162, 28, 250 } });

            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "UserId",
                keyValue: 2,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 167, 8, 123, 20, 109, 31, 165, 166, 236, 120, 162, 86, 108, 38, 12, 251, 44, 246, 131, 16, 228, 49, 67, 140, 242, 205, 214, 212, 245, 254, 121, 56, 180, 50, 250, 249, 41, 61, 243, 90, 101, 74, 128, 133, 133, 240, 133, 71, 97, 78, 87, 13, 166, 84, 228, 212, 212, 248, 173, 21, 149, 22, 87, 40 }, new byte[] { 52, 238, 10, 3, 97, 209, 186, 158, 77, 73, 193, 235, 82, 91, 191, 194, 49, 247, 155, 107, 195, 173, 5, 85, 174, 48, 163, 84, 109, 128, 52, 126, 75, 255, 215, 44, 13, 26, 188, 29, 19, 109, 187, 106, 210, 33, 185, 232, 186, 168, 162, 117, 40, 10, 133, 63, 170, 34, 42, 197, 212, 240, 41, 73, 253, 215, 23, 7, 183, 7, 125, 70, 14, 217, 55, 5, 196, 233, 137, 193, 83, 100, 52, 24, 230, 123, 233, 204, 174, 159, 41, 150, 69, 33, 56, 67, 94, 80, 41, 10, 26, 193, 31, 23, 119, 115, 177, 50, 7, 130, 249, 85, 153, 132, 147, 50, 21, 232, 207, 90, 94, 35, 60, 123, 5, 120, 157, 47 } });
        }
    }
}
