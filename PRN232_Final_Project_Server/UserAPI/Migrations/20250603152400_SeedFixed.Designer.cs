// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserAPI.Data;

#nullable disable

namespace UserAPI.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250603152400_SeedFixed")]
    partial class SeedFixed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserAPI.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Admin St",
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            PasswordHash = new byte[] { 248, 178, 175, 248, 87, 241, 114, 26, 121, 97, 106, 107, 120, 85, 38, 58, 200, 70, 76, 70, 181, 231, 219, 183, 83, 218, 231, 237, 103, 38, 10, 47, 229, 166, 123, 35, 117, 222, 232, 202, 238, 26, 35, 143, 230, 112, 38, 156, 240, 222, 112, 91, 205, 146, 116, 21, 60, 227, 205, 15, 176, 5, 167, 55 },
                            PasswordSalt = new byte[] { 195, 231, 55, 174, 16, 87, 39, 145, 194, 204, 46, 98, 120, 70, 131, 31, 176, 178, 130, 55, 150, 117, 43, 11, 122, 46, 218, 178, 55, 55, 111, 94, 177, 247, 88, 43, 118, 38, 68, 78, 241, 180, 220, 120, 17, 169, 31, 126, 51, 21, 169, 174, 74, 235, 177, 2, 12, 14, 55, 251, 74, 161, 80, 36, 42, 53, 153, 108, 80, 193, 99, 49, 170, 99, 218, 205, 159, 118, 88, 175, 34, 227, 245, 118, 39, 2, 164, 204, 15, 9, 41, 249, 191, 88, 118, 79, 224, 193, 19, 186, 86, 216, 8, 17, 151, 41, 233, 110, 245, 234, 71, 74, 238, 101, 9, 115, 175, 135, 184, 63, 6, 101, 37, 139, 237, 162, 28, 250 },
                            PhoneNumber = "0123456789",
                            RegistrationDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "456 Customer Ave",
                            Email = "customer@example.com",
                            FullName = "Customer User",
                            PasswordHash = new byte[] { 167, 8, 123, 20, 109, 31, 165, 166, 236, 120, 162, 86, 108, 38, 12, 251, 44, 246, 131, 16, 228, 49, 67, 140, 242, 205, 214, 212, 245, 254, 121, 56, 180, 50, 250, 249, 41, 61, 243, 90, 101, 74, 128, 133, 133, 240, 133, 71, 97, 78, 87, 13, 166, 84, 228, 212, 212, 248, 173, 21, 149, 22, 87, 40 },
                            PasswordSalt = new byte[] { 52, 238, 10, 3, 97, 209, 186, 158, 77, 73, 193, 235, 82, 91, 191, 194, 49, 247, 155, 107, 195, 173, 5, 85, 174, 48, 163, 84, 109, 128, 52, 126, 75, 255, 215, 44, 13, 26, 188, 29, 19, 109, 187, 106, 210, 33, 185, 232, 186, 168, 162, 117, 40, 10, 133, 63, 170, 34, 42, 197, 212, 240, 41, 73, 253, 215, 23, 7, 183, 7, 125, 70, 14, 217, 55, 5, 196, 233, 137, 193, 83, 100, 52, 24, 230, 123, 233, 204, 174, 159, 41, 150, 69, 33, 56, 67, 94, 80, 41, 10, 26, 193, 31, 23, 119, 115, 177, 50, 7, 130, 249, 85, 153, 132, 147, 50, 21, 232, 207, 90, 94, 35, 60, 123, 5, 120, 157, 47 },
                            PhoneNumber = "0987654321",
                            RegistrationDate = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = "Customer"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
