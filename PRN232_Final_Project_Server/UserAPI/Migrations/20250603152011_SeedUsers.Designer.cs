// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserAPI.Data;

#nullable disable

namespace UserAPI.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250603152011_SeedUsers")]
    partial class SeedUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserAPI.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Admin St",
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            PasswordHash = new byte[] { 200, 65, 189, 120, 187, 178, 209, 70, 243, 227, 62, 91, 175, 5, 247, 98, 113, 103, 13, 148, 102, 198, 228, 221, 209, 243, 70, 21, 184, 45, 79, 239, 205, 47, 252, 110, 209, 7, 117, 250, 41, 38, 18, 155, 82, 241, 254, 121, 249, 162, 213, 238, 195, 114, 9, 251, 231, 45, 243, 33, 254, 39, 162, 7 },
                            PasswordSalt = new byte[] { 150, 171, 146, 107, 166, 75, 104, 5, 131, 172, 23, 202, 139, 180, 235, 179, 75, 244, 33, 120, 220, 71, 205, 80, 219, 198, 43, 84, 17, 65, 160, 130, 123, 196, 91, 174, 70, 74, 96, 105, 213, 37, 116, 140, 39, 129, 141, 102, 130, 65, 176, 99, 70, 99, 133, 162, 146, 221, 76, 74, 250, 24, 179, 76, 70, 124, 38, 7, 42, 53, 74, 10, 47, 141, 111, 86, 246, 101, 255, 126, 114, 6, 130, 8, 168, 193, 164, 185, 224, 71, 140, 119, 212, 30, 80, 35, 115, 33, 29, 206, 170, 31, 89, 181, 218, 157, 85, 58, 94, 170, 223, 156, 135, 192, 188, 159, 107, 7, 207, 191, 75, 46, 84, 1, 30, 159, 192, 105 },
                            PhoneNumber = "0123456789",
                            RegistrationDate = new DateTime(2025, 6, 3, 15, 20, 10, 343, DateTimeKind.Utc).AddTicks(7616),
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "456 Customer Ave",
                            Email = "customer@example.com",
                            FullName = "Customer User",
                            PasswordHash = new byte[] { 60, 67, 9, 101, 16, 250, 185, 15, 45, 145, 84, 222, 101, 137, 79, 13, 95, 177, 36, 250, 167, 133, 8, 183, 132, 251, 14, 255, 46, 224, 34, 185, 29, 195, 90, 253, 13, 248, 64, 198, 76, 218, 30, 149, 154, 208, 93, 63, 238, 125, 145, 52, 87, 127, 247, 3, 172, 233, 72, 218, 5, 159, 33, 6 },
                            PasswordSalt = new byte[] { 60, 168, 78, 250, 212, 142, 12, 126, 7, 234, 232, 30, 115, 107, 68, 237, 54, 234, 244, 70, 102, 150, 128, 3, 217, 180, 178, 224, 13, 160, 219, 84, 254, 134, 16, 178, 246, 30, 197, 39, 45, 69, 125, 66, 253, 167, 42, 22, 3, 172, 4, 105, 160, 24, 120, 241, 203, 186, 248, 21, 203, 26, 110, 103, 228, 192, 175, 167, 59, 80, 8, 113, 253, 169, 121, 133, 160, 36, 245, 233, 103, 159, 197, 153, 46, 24, 159, 21, 133, 67, 162, 1, 222, 250, 176, 164, 15, 158, 222, 211, 88, 241, 169, 176, 46, 161, 133, 77, 198, 148, 247, 223, 19, 79, 226, 88, 3, 218, 9, 22, 95, 191, 45, 210, 98, 218, 119, 170 },
                            PhoneNumber = "0987654321",
                            RegistrationDate = new DateTime(2025, 6, 3, 15, 20, 10, 343, DateTimeKind.Utc).AddTicks(7860),
                            Role = "Customer"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
